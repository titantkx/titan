// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: titan/farming/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f60be7619b820df0, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f60be7619b820df0, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryFarmRequest is request type for the Query/Farm RPC method.
type QueryFarmRequest struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *QueryFarmRequest) Reset()         { *m = QueryFarmRequest{} }
func (m *QueryFarmRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFarmRequest) ProtoMessage()    {}
func (*QueryFarmRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f60be7619b820df0, []int{2}
}
func (m *QueryFarmRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFarmRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFarmRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFarmRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFarmRequest.Merge(m, src)
}
func (m *QueryFarmRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFarmRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFarmRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFarmRequest proto.InternalMessageInfo

func (m *QueryFarmRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// QueryFarmResponse is response type for the Query/Farm RPC method.
type QueryFarmResponse struct {
	Farm Farm `protobuf:"bytes,1,opt,name=farm,proto3" json:"farm"`
}

func (m *QueryFarmResponse) Reset()         { *m = QueryFarmResponse{} }
func (m *QueryFarmResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFarmResponse) ProtoMessage()    {}
func (*QueryFarmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f60be7619b820df0, []int{3}
}
func (m *QueryFarmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFarmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFarmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFarmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFarmResponse.Merge(m, src)
}
func (m *QueryFarmResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFarmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFarmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFarmResponse proto.InternalMessageInfo

func (m *QueryFarmResponse) GetFarm() Farm {
	if m != nil {
		return m.Farm
	}
	return Farm{}
}

// QueryFarmAllRequest is request type for the Query/AllFarm RPC method.
type QueryFarmAllRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryFarmAllRequest) Reset()         { *m = QueryFarmAllRequest{} }
func (m *QueryFarmAllRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFarmAllRequest) ProtoMessage()    {}
func (*QueryFarmAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f60be7619b820df0, []int{4}
}
func (m *QueryFarmAllRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFarmAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFarmAllRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFarmAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFarmAllRequest.Merge(m, src)
}
func (m *QueryFarmAllRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFarmAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFarmAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFarmAllRequest proto.InternalMessageInfo

func (m *QueryFarmAllRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryFarmAllResponse is response type for the Query/AllFarm RPC method.
type QueryFarmAllResponse struct {
	Farm       []Farm              `protobuf:"bytes,1,rep,name=farm,proto3" json:"farm"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryFarmAllResponse) Reset()         { *m = QueryFarmAllResponse{} }
func (m *QueryFarmAllResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFarmAllResponse) ProtoMessage()    {}
func (*QueryFarmAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f60be7619b820df0, []int{5}
}
func (m *QueryFarmAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFarmAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFarmAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFarmAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFarmAllResponse.Merge(m, src)
}
func (m *QueryFarmAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFarmAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFarmAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFarmAllResponse proto.InternalMessageInfo

func (m *QueryFarmAllResponse) GetFarm() []Farm {
	if m != nil {
		return m.Farm
	}
	return nil
}

func (m *QueryFarmAllResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryStakingInfoRequest is request type for the Query/StakingInfo RPC method.
type QueryStakingInfoRequest struct {
	Token  string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Staker string `protobuf:"bytes,2,opt,name=staker,proto3" json:"staker,omitempty"`
}

func (m *QueryStakingInfoRequest) Reset()         { *m = QueryStakingInfoRequest{} }
func (m *QueryStakingInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStakingInfoRequest) ProtoMessage()    {}
func (*QueryStakingInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f60be7619b820df0, []int{6}
}
func (m *QueryStakingInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakingInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakingInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakingInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakingInfoRequest.Merge(m, src)
}
func (m *QueryStakingInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakingInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakingInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakingInfoRequest proto.InternalMessageInfo

func (m *QueryStakingInfoRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *QueryStakingInfoRequest) GetStaker() string {
	if m != nil {
		return m.Staker
	}
	return ""
}

// QueryStakingInfoResponse is response type for the Query/StakingInfo RPC method.
type QueryStakingInfoResponse struct {
	StakingInfo StakingInfo `protobuf:"bytes,1,opt,name=staking_info,json=stakingInfo,proto3" json:"staking_info"`
}

func (m *QueryStakingInfoResponse) Reset()         { *m = QueryStakingInfoResponse{} }
func (m *QueryStakingInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakingInfoResponse) ProtoMessage()    {}
func (*QueryStakingInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f60be7619b820df0, []int{7}
}
func (m *QueryStakingInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakingInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakingInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakingInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakingInfoResponse.Merge(m, src)
}
func (m *QueryStakingInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakingInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakingInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakingInfoResponse proto.InternalMessageInfo

func (m *QueryStakingInfoResponse) GetStakingInfo() StakingInfo {
	if m != nil {
		return m.StakingInfo
	}
	return StakingInfo{}
}

// QueryStakingInfoAllRequest is request type for the Query/AllStakingInfo RPC method.
type QueryStakingInfoAllRequest struct {
	Token      string             `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryStakingInfoAllRequest) Reset()         { *m = QueryStakingInfoAllRequest{} }
func (m *QueryStakingInfoAllRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStakingInfoAllRequest) ProtoMessage()    {}
func (*QueryStakingInfoAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f60be7619b820df0, []int{8}
}
func (m *QueryStakingInfoAllRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakingInfoAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakingInfoAllRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakingInfoAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakingInfoAllRequest.Merge(m, src)
}
func (m *QueryStakingInfoAllRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakingInfoAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakingInfoAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakingInfoAllRequest proto.InternalMessageInfo

func (m *QueryStakingInfoAllRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *QueryStakingInfoAllRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryStakingInfoAllResponse is response type for the Query/AllStakingInfo RPC method.
type QueryStakingInfoAllResponse struct {
	StakingInfo []StakingInfo       `protobuf:"bytes,1,rep,name=staking_info,json=stakingInfo,proto3" json:"staking_info"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryStakingInfoAllResponse) Reset()         { *m = QueryStakingInfoAllResponse{} }
func (m *QueryStakingInfoAllResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakingInfoAllResponse) ProtoMessage()    {}
func (*QueryStakingInfoAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f60be7619b820df0, []int{9}
}
func (m *QueryStakingInfoAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakingInfoAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakingInfoAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakingInfoAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakingInfoAllResponse.Merge(m, src)
}
func (m *QueryStakingInfoAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakingInfoAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakingInfoAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakingInfoAllResponse proto.InternalMessageInfo

func (m *QueryStakingInfoAllResponse) GetStakingInfo() []StakingInfo {
	if m != nil {
		return m.StakingInfo
	}
	return nil
}

func (m *QueryStakingInfoAllResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDistributionInfoRequest is request type for the Query/DistributionInfo RPC method.
type QueryDistributionInfoRequest struct {
}

func (m *QueryDistributionInfoRequest) Reset()         { *m = QueryDistributionInfoRequest{} }
func (m *QueryDistributionInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDistributionInfoRequest) ProtoMessage()    {}
func (*QueryDistributionInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f60be7619b820df0, []int{10}
}
func (m *QueryDistributionInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDistributionInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDistributionInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDistributionInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDistributionInfoRequest.Merge(m, src)
}
func (m *QueryDistributionInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDistributionInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDistributionInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDistributionInfoRequest proto.InternalMessageInfo

// QueryDistributionInfoResponse is response type for the Query/DistributionInfo RPC method.
type QueryDistributionInfoResponse struct {
	DistributionInfo DistributionInfo `protobuf:"bytes,1,opt,name=distribution_info,json=distributionInfo,proto3" json:"distribution_info"`
}

func (m *QueryDistributionInfoResponse) Reset()         { *m = QueryDistributionInfoResponse{} }
func (m *QueryDistributionInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDistributionInfoResponse) ProtoMessage()    {}
func (*QueryDistributionInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f60be7619b820df0, []int{11}
}
func (m *QueryDistributionInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDistributionInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDistributionInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDistributionInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDistributionInfoResponse.Merge(m, src)
}
func (m *QueryDistributionInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDistributionInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDistributionInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDistributionInfoResponse proto.InternalMessageInfo

func (m *QueryDistributionInfoResponse) GetDistributionInfo() DistributionInfo {
	if m != nil {
		return m.DistributionInfo
	}
	return DistributionInfo{}
}

// QueryRewardRequest is request type for the Query/Reward RPC method.
type QueryRewardRequest struct {
	Farmer string `protobuf:"bytes,1,opt,name=farmer,proto3" json:"farmer,omitempty"`
}

func (m *QueryRewardRequest) Reset()         { *m = QueryRewardRequest{} }
func (m *QueryRewardRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRewardRequest) ProtoMessage()    {}
func (*QueryRewardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f60be7619b820df0, []int{12}
}
func (m *QueryRewardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardRequest.Merge(m, src)
}
func (m *QueryRewardRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardRequest proto.InternalMessageInfo

func (m *QueryRewardRequest) GetFarmer() string {
	if m != nil {
		return m.Farmer
	}
	return ""
}

// QueryRewardResponse is response type for the Query/Reward RPC method.
type QueryRewardResponse struct {
	Reward Reward `protobuf:"bytes,1,opt,name=reward,proto3" json:"reward"`
}

func (m *QueryRewardResponse) Reset()         { *m = QueryRewardResponse{} }
func (m *QueryRewardResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRewardResponse) ProtoMessage()    {}
func (*QueryRewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f60be7619b820df0, []int{13}
}
func (m *QueryRewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardResponse.Merge(m, src)
}
func (m *QueryRewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardResponse proto.InternalMessageInfo

func (m *QueryRewardResponse) GetReward() Reward {
	if m != nil {
		return m.Reward
	}
	return Reward{}
}

// QueryRewardAllRequest is request type for the Query/AllReward RPC method.
type QueryRewardAllRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRewardAllRequest) Reset()         { *m = QueryRewardAllRequest{} }
func (m *QueryRewardAllRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRewardAllRequest) ProtoMessage()    {}
func (*QueryRewardAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f60be7619b820df0, []int{14}
}
func (m *QueryRewardAllRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardAllRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardAllRequest.Merge(m, src)
}
func (m *QueryRewardAllRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardAllRequest proto.InternalMessageInfo

func (m *QueryRewardAllRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryRewardAllResponse is response type for the Query/AllReward RPC method.
type QueryRewardAllResponse struct {
	Reward     []Reward            `protobuf:"bytes,1,rep,name=reward,proto3" json:"reward"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRewardAllResponse) Reset()         { *m = QueryRewardAllResponse{} }
func (m *QueryRewardAllResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRewardAllResponse) ProtoMessage()    {}
func (*QueryRewardAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f60be7619b820df0, []int{15}
}
func (m *QueryRewardAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardAllResponse.Merge(m, src)
}
func (m *QueryRewardAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardAllResponse proto.InternalMessageInfo

func (m *QueryRewardAllResponse) GetReward() []Reward {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *QueryRewardAllResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "titan.farming.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "titan.farming.QueryParamsResponse")
	proto.RegisterType((*QueryFarmRequest)(nil), "titan.farming.QueryFarmRequest")
	proto.RegisterType((*QueryFarmResponse)(nil), "titan.farming.QueryFarmResponse")
	proto.RegisterType((*QueryFarmAllRequest)(nil), "titan.farming.QueryFarmAllRequest")
	proto.RegisterType((*QueryFarmAllResponse)(nil), "titan.farming.QueryFarmAllResponse")
	proto.RegisterType((*QueryStakingInfoRequest)(nil), "titan.farming.QueryStakingInfoRequest")
	proto.RegisterType((*QueryStakingInfoResponse)(nil), "titan.farming.QueryStakingInfoResponse")
	proto.RegisterType((*QueryStakingInfoAllRequest)(nil), "titan.farming.QueryStakingInfoAllRequest")
	proto.RegisterType((*QueryStakingInfoAllResponse)(nil), "titan.farming.QueryStakingInfoAllResponse")
	proto.RegisterType((*QueryDistributionInfoRequest)(nil), "titan.farming.QueryDistributionInfoRequest")
	proto.RegisterType((*QueryDistributionInfoResponse)(nil), "titan.farming.QueryDistributionInfoResponse")
	proto.RegisterType((*QueryRewardRequest)(nil), "titan.farming.QueryRewardRequest")
	proto.RegisterType((*QueryRewardResponse)(nil), "titan.farming.QueryRewardResponse")
	proto.RegisterType((*QueryRewardAllRequest)(nil), "titan.farming.QueryRewardAllRequest")
	proto.RegisterType((*QueryRewardAllResponse)(nil), "titan.farming.QueryRewardAllResponse")
}

func init() { proto.RegisterFile("titan/farming/query.proto", fileDescriptor_f60be7619b820df0) }

var fileDescriptor_f60be7619b820df0 = []byte{
	// 869 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x4f, 0x4f, 0x13, 0x4f,
	0x18, 0xee, 0xf2, 0xa7, 0xbf, 0x1f, 0x2f, 0x6a, 0x60, 0x28, 0x58, 0x56, 0x5c, 0xea, 0x0a, 0x85,
	0x42, 0xd9, 0x15, 0xd0, 0x78, 0xf2, 0x40, 0x31, 0x18, 0x3d, 0x61, 0xb9, 0x99, 0x98, 0x66, 0x4a,
	0x97, 0x75, 0x03, 0xdd, 0x2d, 0xbb, 0x5b, 0x01, 0x09, 0x89, 0xf1, 0x03, 0x18, 0x13, 0x13, 0x6f,
	0x26, 0xde, 0xbd, 0xfa, 0x21, 0x38, 0x12, 0xbd, 0x78, 0x30, 0xc6, 0x80, 0x1f, 0xc4, 0xec, 0xcc,
	0x5b, 0xba, 0xbb, 0xdd, 0x6d, 0x8b, 0xc1, 0xd3, 0x32, 0xf3, 0x3e, 0xf3, 0x3c, 0xcf, 0xcc, 0x3b,
	0xf3, 0x50, 0x18, 0x77, 0x0d, 0x97, 0x9a, 0xea, 0x16, 0xb5, 0xab, 0x86, 0xa9, 0xab, 0xbb, 0x75,
	0xcd, 0x3e, 0x50, 0x6a, 0xb6, 0xe5, 0x5a, 0xe4, 0x2a, 0x2b, 0x29, 0x58, 0x12, 0xe7, 0x36, 0x2d,
	0xa7, 0x6a, 0x39, 0x6a, 0x99, 0x3a, 0x1a, 0xc7, 0xa9, 0x2f, 0x17, 0xcb, 0x9a, 0x4b, 0x17, 0xd5,
	0x1a, 0xd5, 0x0d, 0x93, 0xba, 0x86, 0x65, 0xf2, 0xa5, 0xe2, 0x38, 0xc7, 0x96, 0xd8, 0x48, 0xe5,
	0x03, 0x2c, 0xa5, 0x74, 0x4b, 0xb7, 0xf8, 0xbc, 0xf7, 0x17, 0xce, 0x4e, 0xe8, 0x96, 0xa5, 0xef,
	0x68, 0x2a, 0xad, 0x19, 0x2a, 0x35, 0x4d, 0xcb, 0x65, 0x6c, 0x8d, 0x35, 0xd3, 0x41, 0x93, 0x15,
	0xc3, 0x71, 0x6d, 0xa3, 0x5c, 0xf7, 0x20, 0x25, 0xc3, 0xdc, 0x6a, 0x90, 0xa4, 0x83, 0x30, 0xef,
	0x8b, 0x15, 0x31, 0x58, 0xa9, 0x51, 0x9b, 0x56, 0x9d, 0xe8, 0x9a, 0xad, 0xed, 0x51, 0xbb, 0x82,
	0xb5, 0x4c, 0xb0, 0xe6, 0xb8, 0x74, 0xdb, 0x30, 0x75, 0x9f, 0xa6, 0x9c, 0x02, 0xf2, 0xd4, 0x3b,
	0x8b, 0x75, 0x46, 0x59, 0xd4, 0x76, 0xeb, 0x9a, 0xe3, 0xca, 0x4f, 0x60, 0x24, 0x30, 0xeb, 0xd4,
	0x2c, 0xd3, 0xd1, 0xc8, 0x32, 0x24, 0xb9, 0x74, 0x5a, 0xc8, 0x08, 0xb3, 0x83, 0x4b, 0xa3, 0x4a,
	0xe0, 0x88, 0x15, 0x0e, 0x2f, 0xf4, 0x1d, 0xff, 0x9c, 0x4c, 0x14, 0x11, 0x2a, 0xcf, 0xc2, 0x10,
	0xe3, 0x5a, 0xa3, 0x76, 0x15, 0xf9, 0x49, 0x0a, 0xfa, 0x5d, 0x6b, 0x5b, 0x33, 0x19, 0xcf, 0x40,
	0x91, 0x0f, 0xe4, 0x02, 0x0c, 0xfb, 0x90, 0xa8, 0xb9, 0x00, 0x7d, 0x1e, 0x3d, 0x2a, 0x8e, 0x84,
	0x14, 0x3d, 0x28, 0xea, 0x31, 0x98, 0xfc, 0x1c, 0x9d, 0x7b, 0x85, 0x95, 0x9d, 0x9d, 0x86, 0xe0,
	0x1a, 0x40, 0xb3, 0xc9, 0xc8, 0x95, 0x55, 0xb0, 0xb1, 0xde, 0x8d, 0x50, 0xf8, 0xcd, 0xc1, 0x1b,
	0xa1, 0xac, 0x53, 0x5d, 0xc3, 0xb5, 0x45, 0xdf, 0x4a, 0xf9, 0xad, 0x00, 0xa9, 0x20, 0x7f, 0x8b,
	0xcd, 0xde, 0x2e, 0x6c, 0x92, 0x47, 0x01, 0x3f, 0x3d, 0xcc, 0xcf, 0x4c, 0x47, 0x3f, 0x5c, 0x2b,
	0x60, 0x88, 0xc2, 0x75, 0xe6, 0x67, 0x83, 0xb7, 0xf6, 0xb1, 0xb9, 0x65, 0xb5, 0x3d, 0x64, 0x72,
	0x07, 0x92, 0xde, 0x35, 0xd0, 0x6c, 0xa6, 0x3a, 0x50, 0x48, 0x7f, 0xfd, 0xb2, 0x90, 0x42, 0xe1,
	0x95, 0x4a, 0xc5, 0xd6, 0x1c, 0x67, 0xc3, 0xb5, 0x0d, 0x53, 0x2f, 0x22, 0x4e, 0x2e, 0x41, 0xba,
	0x55, 0x02, 0xb7, 0xbd, 0x0a, 0x57, 0xfc, 0x97, 0x0a, 0x4f, 0x56, 0x0c, 0x6d, 0xdf, 0xb7, 0x12,
	0x4f, 0x61, 0xd0, 0x69, 0x4e, 0xc9, 0xaf, 0x40, 0x0c, 0x0b, 0xf8, 0x5a, 0x17, 0xbd, 0x8d, 0xb5,
	0x88, 0x03, 0xfc, 0x9b, 0x86, 0x7e, 0x16, 0xe0, 0x46, 0xa4, 0x78, 0xec, 0x06, 0x7b, 0x2f, 0xbc,
	0xc1, 0xcb, 0xeb, 0xb6, 0x04, 0x13, 0xcc, 0xec, 0x43, 0x5f, 0x82, 0xf8, 0x5a, 0x2e, 0x3b, 0x70,
	0x33, 0xa6, 0x8e, 0xdb, 0x29, 0xc2, 0x70, 0x4b, 0xfa, 0x60, 0xd3, 0x26, 0x43, 0x7b, 0x0a, 0x73,
	0xe0, 0xc6, 0x86, 0x2a, 0xa1, 0x79, 0x39, 0x8f, 0x11, 0x52, 0x64, 0xc9, 0xd3, 0x68, 0xdb, 0x18,
	0x24, 0x3d, 0x26, 0xcd, 0xc6, 0xbe, 0xe1, 0xe8, 0x3c, 0x5a, 0x1a, 0xe8, 0x66, 0xb4, 0xf0, 0xe4,
	0x8a, 0x89, 0x16, 0x0e, 0x6f, 0x44, 0x0b, 0x87, 0xca, 0x25, 0x18, 0xf5, 0x71, 0xfd, 0x83, 0xe7,
	0xfe, 0x41, 0x80, 0xb1, 0xb0, 0x42, 0x84, 0xe1, 0xde, 0x2e, 0x0d, 0x5f, 0xda, 0x45, 0x58, 0xfa,
	0xf1, 0x3f, 0xf4, 0x33, 0x63, 0x64, 0x0f, 0x92, 0x3c, 0x76, 0xc9, 0xad, 0x90, 0x83, 0xd6, 0x5c,
	0x17, 0xe5, 0x76, 0x10, 0x2e, 0x23, 0x67, 0xdf, 0x7c, 0xfb, 0xfd, 0xbe, 0x27, 0x43, 0x24, 0x95,
	0x61, 0xdd, 0xed, 0x7d, 0x35, 0xea, 0xbf, 0x0f, 0xd9, 0x83, 0x3e, 0x2f, 0xd6, 0xc8, 0x64, 0x14,
	0xa7, 0x2f, 0xec, 0xc5, 0x4c, 0x3c, 0x00, 0x25, 0xf3, 0x4c, 0x32, 0x4b, 0xa6, 0xe2, 0x24, 0xbd,
	0xaf, 0x7a, 0xc8, 0x5e, 0xfe, 0x11, 0xd9, 0x87, 0xff, 0x30, 0x7d, 0x89, 0x1c, 0x47, 0xdd, 0xbc,
	0x0b, 0xe2, 0xed, 0xb6, 0x18, 0x74, 0x30, 0xc5, 0x1c, 0x48, 0x64, 0xa2, 0x9d, 0x03, 0xf2, 0x51,
	0x80, 0x41, 0xdf, 0x53, 0x27, 0xd9, 0x28, 0xea, 0xd6, 0x24, 0x16, 0x67, 0x3a, 0xe2, 0xd0, 0xc6,
	0x03, 0x66, 0xe3, 0x3e, 0xb9, 0x17, 0x67, 0xc3, 0x9f, 0x45, 0x8d, 0x03, 0x51, 0x0f, 0x79, 0x50,
	0x1f, 0x79, 0xfe, 0xae, 0x05, 0x73, 0x8c, 0xe4, 0x3a, 0x48, 0xfb, 0x0e, 0x6a, 0xae, 0x1b, 0x28,
	0x1a, 0xbd, 0xcb, 0x8c, 0x2a, 0x24, 0x7f, 0x11, 0xa3, 0xe4, 0x93, 0x00, 0x43, 0xe1, 0x58, 0x21,
	0xf3, 0x51, 0xb2, 0x31, 0x01, 0x27, 0xe6, 0xbb, 0x03, 0xa3, 0xcb, 0x45, 0xe6, 0x72, 0x9e, 0xe4,
	0xe2, 0x5c, 0xb6, 0x64, 0x21, 0x79, 0x2d, 0x40, 0x92, 0x3f, 0xdd, 0xe8, 0xf7, 0x14, 0x08, 0xb9,
	0xe8, 0xf7, 0x14, 0x4c, 0x36, 0x59, 0x65, 0x26, 0x72, 0x64, 0x26, 0xce, 0x04, 0xcf, 0x06, 0xf5,
	0x90, 0x07, 0xe4, 0x91, 0x67, 0x61, 0xe0, 0x3c, 0x6f, 0xc8, 0x54, 0xbc, 0x84, 0xaf, 0x77, 0xd3,
	0x1d, 0x50, 0xdd, 0xbe, 0x6d, 0xee, 0xa5, 0xb0, 0x7a, 0x7c, 0x2a, 0x09, 0x27, 0xa7, 0x92, 0xf0,
	0xeb, 0x54, 0x12, 0xde, 0x9d, 0x49, 0x89, 0x93, 0x33, 0x29, 0xf1, 0xfd, 0x4c, 0x4a, 0x3c, 0xcb,
	0xe9, 0x86, 0xfb, 0xa2, 0x5e, 0x56, 0x36, 0xad, 0x6a, 0x98, 0x63, 0xff, 0x9c, 0xc5, 0x3d, 0xa8,
	0x69, 0x4e, 0x39, 0xc9, 0x7e, 0x61, 0x2e, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x99, 0xc7, 0x9e,
	0x6e, 0xa3, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Farm queries a farm.
	Farm(ctx context.Context, in *QueryFarmRequest, opts ...grpc.CallOption) (*QueryFarmResponse, error)
	// FarmAll queries all farms.
	FarmAll(ctx context.Context, in *QueryFarmAllRequest, opts ...grpc.CallOption) (*QueryFarmAllResponse, error)
	// StakingInfo queries the staking info of a staker for a token.
	StakingInfo(ctx context.Context, in *QueryStakingInfoRequest, opts ...grpc.CallOption) (*QueryStakingInfoResponse, error)
	// StakingInfoAll queries all staking info of a token.
	StakingInfoAll(ctx context.Context, in *QueryStakingInfoAllRequest, opts ...grpc.CallOption) (*QueryStakingInfoAllResponse, error)
	// DistributionInfo queries the distribution info.
	DistributionInfo(ctx context.Context, in *QueryDistributionInfoRequest, opts ...grpc.CallOption) (*QueryDistributionInfoResponse, error)
	// Reward queries farming rewards of a farmer.
	Reward(ctx context.Context, in *QueryRewardRequest, opts ...grpc.CallOption) (*QueryRewardResponse, error)
	// Reward queries all farming rewards.
	RewardAll(ctx context.Context, in *QueryRewardAllRequest, opts ...grpc.CallOption) (*QueryRewardAllResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/titan.farming.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Farm(ctx context.Context, in *QueryFarmRequest, opts ...grpc.CallOption) (*QueryFarmResponse, error) {
	out := new(QueryFarmResponse)
	err := c.cc.Invoke(ctx, "/titan.farming.Query/Farm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FarmAll(ctx context.Context, in *QueryFarmAllRequest, opts ...grpc.CallOption) (*QueryFarmAllResponse, error) {
	out := new(QueryFarmAllResponse)
	err := c.cc.Invoke(ctx, "/titan.farming.Query/FarmAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StakingInfo(ctx context.Context, in *QueryStakingInfoRequest, opts ...grpc.CallOption) (*QueryStakingInfoResponse, error) {
	out := new(QueryStakingInfoResponse)
	err := c.cc.Invoke(ctx, "/titan.farming.Query/StakingInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StakingInfoAll(ctx context.Context, in *QueryStakingInfoAllRequest, opts ...grpc.CallOption) (*QueryStakingInfoAllResponse, error) {
	out := new(QueryStakingInfoAllResponse)
	err := c.cc.Invoke(ctx, "/titan.farming.Query/StakingInfoAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DistributionInfo(ctx context.Context, in *QueryDistributionInfoRequest, opts ...grpc.CallOption) (*QueryDistributionInfoResponse, error) {
	out := new(QueryDistributionInfoResponse)
	err := c.cc.Invoke(ctx, "/titan.farming.Query/DistributionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Reward(ctx context.Context, in *QueryRewardRequest, opts ...grpc.CallOption) (*QueryRewardResponse, error) {
	out := new(QueryRewardResponse)
	err := c.cc.Invoke(ctx, "/titan.farming.Query/Reward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RewardAll(ctx context.Context, in *QueryRewardAllRequest, opts ...grpc.CallOption) (*QueryRewardAllResponse, error) {
	out := new(QueryRewardAllResponse)
	err := c.cc.Invoke(ctx, "/titan.farming.Query/RewardAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Farm queries a farm.
	Farm(context.Context, *QueryFarmRequest) (*QueryFarmResponse, error)
	// FarmAll queries all farms.
	FarmAll(context.Context, *QueryFarmAllRequest) (*QueryFarmAllResponse, error)
	// StakingInfo queries the staking info of a staker for a token.
	StakingInfo(context.Context, *QueryStakingInfoRequest) (*QueryStakingInfoResponse, error)
	// StakingInfoAll queries all staking info of a token.
	StakingInfoAll(context.Context, *QueryStakingInfoAllRequest) (*QueryStakingInfoAllResponse, error)
	// DistributionInfo queries the distribution info.
	DistributionInfo(context.Context, *QueryDistributionInfoRequest) (*QueryDistributionInfoResponse, error)
	// Reward queries farming rewards of a farmer.
	Reward(context.Context, *QueryRewardRequest) (*QueryRewardResponse, error)
	// Reward queries all farming rewards.
	RewardAll(context.Context, *QueryRewardAllRequest) (*QueryRewardAllResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Farm(ctx context.Context, req *QueryFarmRequest) (*QueryFarmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Farm not implemented")
}
func (*UnimplementedQueryServer) FarmAll(ctx context.Context, req *QueryFarmAllRequest) (*QueryFarmAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FarmAll not implemented")
}
func (*UnimplementedQueryServer) StakingInfo(ctx context.Context, req *QueryStakingInfoRequest) (*QueryStakingInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakingInfo not implemented")
}
func (*UnimplementedQueryServer) StakingInfoAll(ctx context.Context, req *QueryStakingInfoAllRequest) (*QueryStakingInfoAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakingInfoAll not implemented")
}
func (*UnimplementedQueryServer) DistributionInfo(ctx context.Context, req *QueryDistributionInfoRequest) (*QueryDistributionInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DistributionInfo not implemented")
}
func (*UnimplementedQueryServer) Reward(ctx context.Context, req *QueryRewardRequest) (*QueryRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reward not implemented")
}
func (*UnimplementedQueryServer) RewardAll(ctx context.Context, req *QueryRewardAllRequest) (*QueryRewardAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titan.farming.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Farm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFarmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Farm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titan.farming.Query/Farm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Farm(ctx, req.(*QueryFarmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FarmAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFarmAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FarmAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titan.farming.Query/FarmAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FarmAll(ctx, req.(*QueryFarmAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StakingInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakingInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StakingInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titan.farming.Query/StakingInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StakingInfo(ctx, req.(*QueryStakingInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StakingInfoAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakingInfoAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StakingInfoAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titan.farming.Query/StakingInfoAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StakingInfoAll(ctx, req.(*QueryStakingInfoAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DistributionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDistributionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DistributionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titan.farming.Query/DistributionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DistributionInfo(ctx, req.(*QueryDistributionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Reward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Reward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titan.farming.Query/Reward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Reward(ctx, req.(*QueryRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RewardAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titan.farming.Query/RewardAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardAll(ctx, req.(*QueryRewardAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "titan.farming.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Farm",
			Handler:    _Query_Farm_Handler,
		},
		{
			MethodName: "FarmAll",
			Handler:    _Query_FarmAll_Handler,
		},
		{
			MethodName: "StakingInfo",
			Handler:    _Query_StakingInfo_Handler,
		},
		{
			MethodName: "StakingInfoAll",
			Handler:    _Query_StakingInfoAll_Handler,
		},
		{
			MethodName: "DistributionInfo",
			Handler:    _Query_DistributionInfo_Handler,
		},
		{
			MethodName: "Reward",
			Handler:    _Query_Reward_Handler,
		},
		{
			MethodName: "RewardAll",
			Handler:    _Query_RewardAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "titan/farming/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryFarmRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFarmRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFarmRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFarmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFarmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFarmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Farm.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryFarmAllRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFarmAllRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFarmAllRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFarmAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFarmAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFarmAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Farm) > 0 {
		for iNdEx := len(m.Farm) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Farm[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakingInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakingInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakingInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Staker) > 0 {
		i -= len(m.Staker)
		copy(dAtA[i:], m.Staker)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Staker)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakingInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakingInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakingInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.StakingInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryStakingInfoAllRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakingInfoAllRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakingInfoAllRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakingInfoAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakingInfoAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakingInfoAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.StakingInfo) > 0 {
		for iNdEx := len(m.StakingInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StakingInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDistributionInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDistributionInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDistributionInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryDistributionInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDistributionInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDistributionInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DistributionInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryRewardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Farmer) > 0 {
		i -= len(m.Farmer)
		copy(dAtA[i:], m.Farmer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Farmer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Reward.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryRewardAllRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardAllRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardAllRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Reward) > 0 {
		for iNdEx := len(m.Reward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryFarmRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFarmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Farm.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryFarmAllRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFarmAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Farm) > 0 {
		for _, e := range m.Farm {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStakingInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Staker)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStakingInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StakingInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryStakingInfoAllRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStakingInfoAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StakingInfo) > 0 {
		for _, e := range m.StakingInfo {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDistributionInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryDistributionInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DistributionInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryRewardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Farmer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Reward.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryRewardAllRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRewardAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Reward) > 0 {
		for _, e := range m.Reward {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFarmRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFarmRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFarmRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFarmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFarmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFarmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Farm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Farm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFarmAllRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFarmAllRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFarmAllRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFarmAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFarmAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFarmAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Farm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Farm = append(m.Farm, Farm{})
			if err := m.Farm[len(m.Farm)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakingInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakingInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakingInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Staker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakingInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakingInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakingInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakingInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakingInfoAllRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakingInfoAllRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakingInfoAllRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakingInfoAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakingInfoAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakingInfoAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingInfo = append(m.StakingInfo, StakingInfo{})
			if err := m.StakingInfo[len(m.StakingInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDistributionInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDistributionInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDistributionInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDistributionInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDistributionInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDistributionInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DistributionInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Farmer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Farmer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardAllRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardAllRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardAllRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reward = append(m.Reward, Reward{})
			if err := m.Reward[len(m.Reward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
