syntax = "proto3";
package titan.tokenfactory.v1beta1;

import "gogoproto/gogo.proto";
import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/bank/v1beta1/bank.proto";
import "cosmos/msg/v1/msg.proto";

option go_package = "github.com/titantkx/titan/x/tokenfactory/types";

// Msg defines the tokefactory module's gRPC message service.
service Msg {
  // CreateClass defines a method to create new denom.
  rpc CreateDenom(MsgCreateDenom) returns (MsgCreateDenomResponse);

  // CreateClass defines a method to mint new tokens.
  rpc Mint(MsgMint) returns (MsgMintResponse);

  // CreateClass defines a method to burn tokens.
  rpc Burn(MsgBurn) returns (MsgBurnResponse);

  // CreateClass defines a method to change admin for a denom.
  rpc ChangeAdmin(MsgChangeAdmin) returns (MsgChangeAdminResponse);

  // CreateClass defines a method to set metadata for a denom.
  rpc SetDenomMetadata(MsgSetDenomMetadata) returns (MsgSetDenomMetadataResponse);

  // CreateClass defines a method to set before send hook for a denom.
  rpc SetBeforeSendHook(MsgSetBeforeSendHook) returns (MsgSetBeforeSendHookResponse);

  // CreateClass defines a method to force transfer tokens.
  rpc ForceTransfer(MsgForceTransfer) returns (MsgForceTransferResponse);
}

// MsgCreateDenom defines the message structure for the CreateDenom gRPC service
// method. It allows an account to create a new denom. It requires a sender
// address and a sub denomination. The (sender_address, sub_denomination) tuple
// must be unique and cannot be re-used.
//
// The resulting denom created is defined as
// <factory/{creatorAddress}/{subdenom}>. The resulting denom's admin is
// originally set to be the creator, but this can be changed later. The token
// denom does not indicate the current admin.
message MsgCreateDenom {
  option (amino.name)           = "titan/tokenfactory/create-denom";
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1 [(gogoproto.moretags) = "yaml:\"sender\""];
  // subdenom can be up to 44 "alphanumeric" characters long.
  string subdenom = 2 [(gogoproto.moretags) = "yaml:\"subdenom\""];
}

// MsgMintResponse defines the Msg/CreateDenom response type.
message MsgCreateDenomResponse {
  string new_token_denom = 1 [(gogoproto.moretags) = "yaml:\"new_token_denom\""];
}

// MsgMint is the sdk.Msg type for allowing an admin account to mint
// more of a token.
// Only the admin of the token factory denom has permission to mint unless
// the denom does not have any admin.
message MsgMint {
  option (amino.name)           = "titan/tokenfactory/mint";
  option (cosmos.msg.v1.signer) = "sender";

  string                   sender = 1 [(gogoproto.moretags) = "yaml:\"sender\""];
  cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.moretags) = "yaml:\"amount\"", (gogoproto.nullable) = false];
  string mint_to_address = 3 [(gogoproto.moretags) = "yaml:\"mint_to_address\"", (amino.dont_omitempty) = true];
}

// MsgMintResponse defines the Msg/Mint response type.
message MsgMintResponse {}

// MsgBurn is the sdk.Msg type for allowing an admin account to burn
// a token.
// Only the admin of the token factory denom has permission to burn unless
// the denom does not have any admin.
message MsgBurn {
  option (amino.name)           = "titan/tokenfactory/burn";
  option (cosmos.msg.v1.signer) = "sender";

  string                   sender = 1 [(gogoproto.moretags) = "yaml:\"sender\""];
  cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.moretags) = "yaml:\"amount\"", (gogoproto.nullable) = false];
  string burn_from_address = 3 [(gogoproto.moretags) = "yaml:\"burn_from_address\"", (amino.dont_omitempty) = true];
}

// MsgMintResponse defines the Msg/Burn response type.
message MsgBurnResponse {}

// MsgChangeAdmin is the sdk.Msg type for allowing an admin account to reassign
// adminship of a denom to a new account
message MsgChangeAdmin {
  option (amino.name)           = "titan/tokenfactory/change-admin";
  option (cosmos.msg.v1.signer) = "sender";

  string sender    = 1 [(gogoproto.moretags) = "yaml:\"sender\""];
  string denom     = 2 [(gogoproto.moretags) = "yaml:\"denom\""];
  string new_admin = 3 [(gogoproto.moretags) = "yaml:\"new_admin\""];
}

// MsgMintResponse defines the Msg/ChangeAdmin response type.
message MsgChangeAdminResponse {}

// MsgSetBeforeSendHook is the sdk.Msg type for allowing an admin account to
// assign a CosmWasm contract to call with a BeforeSend hook
message MsgSetBeforeSendHook {
  option (amino.name)           = "titan/tokenfactory/set-bef-send-hook";
  option (cosmos.msg.v1.signer) = "sender";

  string sender           = 1 [(gogoproto.moretags) = "yaml:\"sender\""];
  string denom            = 2 [(gogoproto.moretags) = "yaml:\"denom\""];
  string cosmwasm_address = 3 [(gogoproto.moretags) = "yaml:\"cosmwasm_address\"", (amino.dont_omitempty) = true];
}

// MsgMintResponse defines the Msg/SetBeforeSendHook response type.
message MsgSetBeforeSendHookResponse {}

// MsgSetDenomMetadata is the sdk.Msg type for allowing an admin account to set
// the denom's bank metadata
message MsgSetDenomMetadata {
  option (amino.name)           = "titan/tokenfactory/set-denom-metadata";
  option (cosmos.msg.v1.signer) = "sender";

  string                       sender   = 1 [(gogoproto.moretags) = "yaml:\"sender\""];
  cosmos.bank.v1beta1.Metadata metadata = 2 [(gogoproto.moretags) = "yaml:\"metadata\"", (gogoproto.nullable) = false];
}

// MsgMintResponse defines the Msg/SetDenomMetadata response type.
message MsgSetDenomMetadataResponse {}

// MsgForceTransfer represents a message to force transfer tokens from an
// address to another address.
message MsgForceTransfer {
  option (amino.name)           = "titan/tokenfactory/force-transfer";
  option (cosmos.msg.v1.signer) = "sender";

  string                   sender = 1 [(gogoproto.moretags) = "yaml:\"sender\""];
  cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.moretags) = "yaml:\"amount\"", (gogoproto.nullable) = false];
  string                   transfer_from_address = 3 [(gogoproto.moretags) = "yaml:\"transfer_from_address\""];
  string                   transfer_to_address   = 4 [(gogoproto.moretags) = "yaml:\"transfer_to_address\""];
}

// MsgMintResponse defines the Msg/ForceTransfer response type.
message MsgForceTransferResponse {}