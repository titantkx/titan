syntax = "proto3";
package titan.tokenfactory.v1beta1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "titan/tokenfactory/v1beta1/authority_metadata.proto";
import "titan/tokenfactory/v1beta1/params.proto";

option go_package = "github.com/titantkx/titan/x/tokenfactory/types";

// Query defines the gRPC querier service.
service Query {
  // Params defines a gRPC query method that returns the tokenfactory module's
  // parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/titan/tokenfactory/v1beta1/params";
  }

  // DenomAuthorityMetadata defines a gRPC query method for fetching
  // DenomAuthorityMetadata for a particular denom.
  rpc DenomAuthorityMetadata(QueryDenomAuthorityMetadataRequest) returns (QueryDenomAuthorityMetadataResponse) {
    option (google.api.http).get = "/titan/tokenfactory/v1beta1/denoms/{denom}/authority_metadata";
  }

  // DenomsFromCreator defines a gRPC query method for fetching all
  // denominations created by a specific admin/creator.
  rpc DenomsFromCreator(QueryDenomsFromCreatorRequest) returns (QueryDenomsFromCreatorResponse) {
    option (google.api.http).get = "/titan/tokenfactory/v1beta1/denoms_from_creator/{creator}";
  }

  // BeforeSendHookAddress defines a gRPC query method for
  // getting the address registered for the before send hook.
  rpc BeforeSendHookAddress(QueryBeforeSendHookAddressRequest) returns (QueryBeforeSendHookAddressResponse) {
    option (google.api.http).get = "/titan/tokenfactory/v1beta1/denoms/{denom}/before_send_hook";
  }

  // AllBeforeSendHooksAddresses defines a gRPC query method for
  // getting all addresses with before send hook registered.
  // The response returns two arrays, an array with a list of denom and an array
  // of before send hook addresses. The idx of denom corresponds to before send
  // hook addresse's idx.
  rpc AllBeforeSendHooksAddresses(QueryAllBeforeSendHooksAddressesRequest)
      returns (QueryAllBeforeSendHooksAddressesResponse) {
    option (google.api.http).get = "/titan/tokenfactory/v1beta1/all_before_send_hooks";
  }
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryDenomAuthorityMetadataRequest is request type for the
// Query/DenomAuthorityMetadata RPC method.
message QueryDenomAuthorityMetadataRequest {
  string denom = 1 [(gogoproto.moretags) = "yaml:\"denom\""];
}

// QueryDenomAuthorityMetadataResponse is response type for the
// Query/DenomAuthorityMetadata RPC method.
message QueryDenomAuthorityMetadataResponse {
  DenomAuthorityMetadata authority_metadata = 1
      [(gogoproto.moretags) = "yaml:\"authority_metadata\"", (gogoproto.nullable) = false];
}

// QueryDenomsFromCreatorRequest is request type for the
// Query/DenomsFromCreator RPC method.
message QueryDenomsFromCreatorRequest {
  string creator = 1 [(gogoproto.moretags) = "yaml:\"creator\""];
}

// QueryDenomsFromCreatorResponse is response type for the
// Query/DenomsFromCreator RPC method.
message QueryDenomsFromCreatorResponse {
  repeated string denoms = 1 [(gogoproto.moretags) = "yaml:\"denoms\""];
}

// QueryBeforeSendHookAddressRequest is request type for the
// Query/BeforeSendHookAddress RPC method.
message QueryBeforeSendHookAddressRequest {
  string denom = 1 [(gogoproto.moretags) = "yaml:\"denom\""];
}

// QueryBeforeSendHookAddressResponse is response type for the
// Query/BeforeSendHookAddress RPC method.
message QueryBeforeSendHookAddressResponse {
  string cosmwasm_address = 1 [(gogoproto.moretags) = "yaml:\"cosmwasm_address\""];
}

// QueryAllBeforeSendHooksAddressesRequest is request type for the
// Query/AllBeforeSendHooksAddresses RPC method.
message QueryAllBeforeSendHooksAddressesRequest {}

// QueryAllBeforeSendHooksAddressesResponse is response type for the
// Query/AllBeforeSendHooksAddresses RPC method.
message QueryAllBeforeSendHooksAddressesResponse {
  repeated string denoms                     = 1 [(gogoproto.moretags) = "yaml:\"denoms\""];
  repeated string before_send_hook_addresses = 2 [(gogoproto.moretags) = "yaml:\"before_send_addresses\""];
}