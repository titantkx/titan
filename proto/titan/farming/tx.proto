syntax = "proto3";

package titan.farming;

import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/titantkx/titan/x/farming/types";

// Msg defines the Msg service.
service Msg {
  // AddReward defines a method to add farming rewards.
  rpc AddReward(MsgAddReward) returns (MsgAddRewardResponse);

  // Stake defines a method to stake tokens.
  rpc Stake(MsgStake) returns (MsgStakeResponse);

  // Unstake defines a method to unstake tokens.
  rpc Unstake(MsgUnstake) returns (MsgUnstakeResponse);

  // Harvest defines a method to harvest farming rewards.
  rpc Harvest(MsgHarvest) returns (MsgHarvestResponse);
}

// MsgStake represents a message to add farming rewards.
message MsgAddReward {
  string   sender                          = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string   token                           = 2;  // Staking token
  repeated cosmos.base.v1beta1.Coin amount = 3 [
    (gogoproto.nullable)     = false,
    (amino.dont_omitempty)   = true,
    (amino.encoding)         = "legacy_coins",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];  // Reward amount
  google.protobuf.Timestamp end_time   = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
  google.protobuf.Timestamp start_time = 5 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

// MsgAddRewardResponse defines the Msg/AddReward response type.
message MsgAddRewardResponse {}

// MsgStake represents a message to stake tokens.
message MsgStake {
  string   sender                          = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  repeated cosmos.base.v1beta1.Coin amount = 2 [
    (gogoproto.nullable)     = false,
    (amino.dont_omitempty)   = true,
    (amino.encoding)         = "legacy_coins",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// MsgStakeResponse defines the Msg/Stake response type.
message MsgStakeResponse {}

// MsgUnstake represents a message to unstake tokens.
message MsgUnstake {
  string   sender                          = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  repeated cosmos.base.v1beta1.Coin amount = 2 [
    (gogoproto.nullable)     = false,
    (amino.dont_omitempty)   = true,
    (amino.encoding)         = "legacy_coins",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// MsgUnstakeResponse defines the Msg/Unstake response type.
message MsgUnstakeResponse {}

// MsgHarvest represents a message to harvest farming rewards.
message MsgHarvest {
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgHarvestResponse defines the Msg/Harvest response type.
message MsgHarvestResponse {}
